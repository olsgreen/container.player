{"version":3,"sources":["container.player.js"],"names":[],"mappingsfile":"container.player.min.js","sourcesContent":["/*\n * ContainerPlayer - Implement regular & fullscreen background videos like a boss.\n *\n * Inspired by Benton Rochesters https://github.com/rochestb/jQuery.YoutubeBackground\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * Version:  0.8.0\n *\n */\n\n(function($, window, document) {\n\n    var global = window.ContainerPlayer = {};\n\n    if (typeof Object.create !== \"function\") {\n        Object.create = function(obj) {\n            function F() {}\n            F.prototype = obj;\n            return new F();\n        };\n    }\n\n    var ContainerPlayer = {\n\n        defaults: {\n            autoplay: true,\n            loop: true,\n            muted: true,\n            controls: false,\n            ratio: 16 / 9,\n            fitContainer: true,\n            forceAspect: false,\n        },\n\n        init: function(el, userOptions) {\n            var self = this;\n\n            self.$window = $(window);\n\n            if ('BODY' === el.tagName) {\n                self.$container = $('<div class=\"container-player fullscreen-background\"></div>');\n                $(el).append(self.$container);\n            } else {\n                self.$container = $(el);\n            }\n\n            self.options = $.extend(true, {}, self.defaults, userOptions);\n            \n            self.ID = parseInt(Math.random() * 1000000);\n            self.outerID = 'containerPlayerOuter' + self.ID;\n            self.innerID = 'containerPlayerInner' + self.ID;\n            self.overlayID = 'containerPlayerOverlay' + self.ID;\n\n            self.createContainer();\n\n            if (typeof this.options.youTube === 'object') {\n                this.adapter = Object.create(YouTubeAdapter);\n                self.$container.addClass('youtube');\n            } else if (typeof this.options.html5 === 'object') {\n                this.adapter = Object.create(HTML5Adapter);\n                self.$container.addClass('html5');\n            } else {\n                throw \"Invalid options passed, no adapter configuration found.\";\n            }\n\n            this.adapter.init(this);\n\n            // Listen for Resize Event\n            self.$window.on('resize.ContainerPlayer' + self.ID, function() {\n                self.resize();\n            });\n\n            self.resize(self);\n\n            return self;\n        },\n\n        setDimensions: function($container) {\n            this.options.width = $container.width();\n            this.options.height = $container.height();\n        },\n\n        createContainer: function() {\n            var self = this;\n\n            /*jshint multistr: true */\n            self.player = {};\n            self.player.$outer = $('<div id=\"' + self.outerID + '\" class=\"container-player-outer\"></div>');\n            self.player.$inner = $('<div id=\"' + self.innerID + '\" class=\"container-player-inner\"></div>');\n\n            if (self.options.overlay) {\n                self.player.$overlay = $('<div id=\"' + self.overlayID + '\" class=\"container-player-overlay\"></div>');\n\n                if (typeof self.options.overlay.opacity !== \"undefined\") {\n                    self.player.$overlay.css('opacity', self.options.overlay.opacity);\n                }\n\n                if (typeof self.options.overlay.color !== \"undefined\") {\n                    self.player.$overlay.css('background-color', self.options.overlay.color);\n                }\n\n                if (typeof self.options.overlay.image !== \"undefined\") {\n                    self.player.$overlay.css('background-image', 'url('+self.options.overlay.image+')');\n\n                    if (typeof self.options.overlay.backgroundSize !== \"undefined\") {\n                        self.player.$overlay.css('background-size', 'url('+self.options.overlay.backgroundSize+')');\n                    }\n\n                    if (typeof self.options.overlay.backgroundRepeat !== \"undefined\") {\n                        self.player.$overlay.css('background-repeat', 'url('+self.options.overlay.backgroundRepeat+')');\n                    }\n                }\n\n                self.$container.append(self.player.$overlay);\n            }\n\n            self.$container.append(self.player.$outer.append(self.player.$inner));\n        },\n\n        resize: function() {\n            \n            var self = this;\n\n            self.setDimensions(self.$container);\n\n            var pWidth, // player width, to be defined\n                pHeight, // player height, tbd\n                $YTPlayerPlayer = $('#' + self.innerID);\n\n            if (self.options.forceAspect) {\n                pHeight = (self.options.width / self.options.ratio).toFixed(3);\n                self.$container.height(pHeight);\n\n                $YTPlayerPlayer.width(self.options.width).css({\n                    left: 0,\n                    top: 0,\n                    height: pHeight,\n                });\n\n                return;\n            }\n\n            if (self.options.fitContainer && (self.options.width / self.options.ratio < self.options.height)) {\n                pWidth = Math.ceil(self.options.height * self.options.ratio); // get new player width\n                $YTPlayerPlayer.width(pWidth).height(self.options.height).css({\n                    left: (self.options.width - pWidth) / 2,\n                    top: 0\n                }); // player width is greater, offset left; reset top\n            } else { // new video width < window width (gap to right)\n                pHeight = Math.ceil(self.options.width / self.options.ratio); // get new player height\n                $YTPlayerPlayer.width(self.options.width).height(pHeight).css({\n                    left: 0,\n                    top: (self.options.height - pHeight) / 2\n                }); // player height is greater, offset top; reset left\n            }\n\n            $YTPlayerPlayer = null;\n        },\n\n        videoLoaded: function() {\n            this.$container\n                .addClass('loaded')\n                .trigger('video.loaded', this);\n        },\n\n        videoPlaying: function() {\n            this.$container\n                .removeClass('paused')\n                .addClass('playing')\n                .trigger('video.playing', this);\n        },\n\n        videoPaused: function() {\n            this.$container\n                .removeClass('playing')\n                .addClass('paused')\n                .trigger('video.paused', this);\n        },\n\n        videoEnded: function() {\n            this.$container\n                .removeClass('playing')\n                .trigger('video.ended', this);\n        },\n\n        play: function() {\n            this.adapter.play();\n        },\n\n        pause: function() {\n            this.adapter.pause();\n        },\n\n        goTo: function(secs) {\n            this.adapter.goTo(secs);\n        },\n    },\n\n    AbstactAdapter = {\n\n        init: function(containerPlayer) {\n            throw \"Not implemented\";\n        },\n\n        play: function() {\n            throw \"Not implemented\";\n        },\n\n        pause: function() {\n            throw \"Not implemented\";\n        },\n\n        goTo: function() {\n            throw \"Not implemented\";\n        }  \n    },\n\n    HTML5Adapter = {\n        defaults: {\n            html5: {\n                sources: [\n                    // ['video/mp4', 'http://my-server.com/path/to/video.mp4']\n                    // ['video/webm', 'http://my-server.com/path/to/video.webm']\n                ],\n                props: {\n                    preload: 'auto', // none | metadata | auto\n                    crossorigin: null, // null | anonymous | use-credentials\n                }\n            }\n        },\n\n        init: function(containerPlayer) {\n            var self = this;\n\n            self.containerPlayer = containerPlayer;\n            self.options = $.extend(true, {}, self.defaults, self.containerPlayer.options);\n\n            // If sources aren't defined but a single src options is set the videos src property.\n            if (typeof self.options.html5.src !== 'undefined' &&\n                0 === self.options.html5.sources.length) {\n                self.options.html5.props.src = self.options.html5.src;\n            }\n\n            //\n            // Setup\n            //\n\n            // Poster\n            if (typeof self.options.html5.poster !== \"undefined\") {\n                self.containerPlayer.player.$outer.css('background-image', 'url('+self.options.html5.poster+')');\n            }\n\n            // Autoplay\n            if (typeof self.options.html5.props.autoplay === \"undefined\") {\n                self.options.html5.props.autoplay = self.options.autoplay;\n            }\n\n            // Loop\n            if (typeof self.options.html5.props.loop === \"undefined\") {\n                self.options.html5.props.loop = self.options.loop;\n            }\n\n            // Controls\n            if (typeof self.options.html5.props.controls === \"undefined\") {\n                self.options.html5.props.controls = self.options.controls;\n            }\n\n            // Controls\n            if (typeof self.options.html5.props.muted === \"undefined\") {\n                self.options.html5.props.muted = self.options.muted;\n            }\n\n            self.createHTML5Video();\n        },\n\n        createHTML5Video: function() {\n            var $player = $('#' + this.innerID);\n            this.$video = $(\"<video>Your browser doesn't support HTML5 video tag.</video>\");\n            this.$video.on('canplay playing pause', this.onPlayerStateChange.bind(this));\n\n            // Video Properties\n            for (var name in this.options.html5.props) {\n                var value = this.options.html5.props[name];\n\n                if (value) {\n                    this.$video.prop(name, value);\n                }\n            }\n\n            // Video Sources\n            for (var source in this.options.html5.sources) {\n                this.$video.append(\n                    $('<source></source>')\n                        .prop('src', this.options.html5.sources[source][1])\n                        .prop('type', this.options.html5.sources[source][0])\n                );\n            }\n\n            this.containerPlayer.player.$inner.append(this.$video);\n        },\n\n        onPlayerStateChange: function(event) {\n            switch (event.type) {\n                case 'canplay':\n                    this.containerPlayer.videoLoaded();\n                break;\n                case 'playing':\n                    this.containerPlayer.videoPlaying();\n                break;\n                case 'pause':\n                    this.containerPlayer.videoPaused();\n                break;\n                case 'ended':\n                    this.containerPlayer.videoEnded();\n                break;\n            }\n        },\n\n        play: function() {\n            this.$video[0].play();\n        },\n\n        pause: function() {\n            this.$video[0].pause();\n        },\n\n        goTo: function(secs) {\n            this.$video[0].currentTime = secs;\n        }\n    },\n\n    YouTubeAdapter = $.extend(Object.create(AbstactAdapter), {\n        // Default settings for the adapter.\n        defaults: {\n            videoId: '',\n            playerVars: {\n                iv_load_policy: 3,\n                modestbranding: 1,\n                showinfo: 0,\n                wmode: 'opaque',\n                branding: 0,\n                autohide: 1,\n                rel: 0,\n            }\n        },\n\n        init: function(containerPlayer) {\n            var self = this;\n\n            // Make a local reference to the player\n            self.containerPlayer = containerPlayer;\n\n            // Merge the default and user specified options.\n            self.options = $.extend(\n                true, {}, self.defaults, self.containerPlayer.options.youTube\n            );\n\n            // Poster\n            if (typeof self.options.poster !== \"undefined\") {\n                self.containerPlayer.player.$outer.css('background-image', 'url('+self.options.poster+')');\n            }\n\n            // Autoplay\n            if (typeof self.options.playerVars.autoplay === \"undefined\") {\n                self.options.playerVars.autoplay = self.containerPlayer.options.autoplay ? 1 : 0;\n            }\n\n            // Loop\n            if (typeof self.options.playerVars.loop === \"undefined\") {\n                self.options.playerVars.loop = self.options.loop ? 1 : 0;\n\n                if (self.options.loop && typeof self.options.playerVars.playlist === \"undefined\") {\n                    self.options.playerVars.playlist = self.containerPlayer.options.youTube.videoId;\n                }\n            }\n\n            // Controls\n            if (typeof self.options.playerVars.controls === \"undefined\") {\n                self.options.playerVars.controls = self.containerPlayer.options.controls ? 1 : 0;\n            }\n\n            // Define the global YouTube scope for API loading.\n            if (typeof global.YouTube === \"undefined\") {\n                global.YouTube = {\n                    apiLoading: false,\n                    onApiLoad: $.Deferred(),\n                };\n            }\n\n            // When the YouTube API is ready create a new player instance.\n            self.whenApiIsReady(self.createPlayer.bind(self));\n\n            // Load the YouTube API\n            self.loadApi();\n        },\n\n        whenApiIsReady: function(callback) {\n            // Immediatly make the callback if the YouTube API is loaded.\n            if (typeof YT === 'object')  {\n                callback();\n                return;\n            } \n\n            // Add the callback to the queue to be called once the API has loaded.\n            global.YouTube.onApiLoad.done(function() { callback(); });\n        },\n\n        loadApi: function() {\n            if (typeof YT === 'undefined' && global.YouTube.apiLoading === false) {\n                global.YouTube.apiLoading = true;\n\n                // Listen for the ready call from the YouTube API.                \n                window.onYouTubeIframeAPIReady = function() {\n                    window.onYouTubeIframeAPIReady = null;\n\n                    // Resolve all of the callbacks that are currently \n                    // waiting for the API to finish loading.\n                    global.YouTube.onApiLoad.resolve();\n                };\n\n                // Load Youtube API\n                var tag = document.createElement('script'),\n                head = document.getElementsByTagName('head')[0];\n\n                if (window.location.origin == 'file://') {\n                    tag.src = 'http://www.youtube.com/iframe_api';\n                } else {\n                    tag.src = '//www.youtube.com/iframe_api';\n                }\n\n                head.appendChild(tag);\n\n                // Clean up Tags.\n                head = null;\n                tag = null;\n            }\n        },\n\n        createPlayer: function() {\n            var self = this;\n\n            // Create a new YouTube player instance with our options.\n            self.player = new YT.Player(self.containerPlayer.innerID, {\n                videoId: self.options.videoId,\n                playerVars: self.options.playerVars,\n                events: {\n                    'onReady': self.onPlayerReady.bind(self),\n                    'onStateChange': self.onPlayerStateChange.bind(self),\n                }\n            });\n        },\n\n        onPlayerReady: function(event) {\n            // Tell the player that the video has been loaded.\n            this.containerPlayer.videoLoaded();\n\n            // Mute the video if our options specify so.\n            if (this.containerPlayer.options.muted) {\n                event.target.mute();\n            }\n        },\n\n        onPlayerStateChange: function(event) {\n            // When the YouTube players state changes we \n            // relay the change events to our player.\n            switch (event.data) {\n                case YT.PlayerState.PLAYING:\n                    this.containerPlayer.videoPlaying();\n                break;\n                case YT.PlayerState.PAUSED:\n                    this.containerPlayer.videoPaused();\n                break;\n                case YT.PlayerState.ENDED:\n                    this.containerPlayer.videoEnded();\n                break;\n            }\n        },\n\n        play: function() {\n            // Shim to play the video.\n            this.player.playVideo();\n        },\n\n        pause: function() {\n            // Shim to pause the video.\n            this.player.pauseVideo();\n        },\n\n        goTo: function(secs) {\n            // Shim to goTo a specified position within the video.\n            this.player.seekTo(secs);\n        }\n    });\n\n    $.fn.ContainerPlayer = function(options) {\n\n        return this.each(function() {\n            var el = this;\n            $(el).data(\"player.init\", true);\n\n            var player = Object.create(ContainerPlayer);\n            player.init(el, options);\n            $.data(el, \"player\", player);\n        });\n\n    };\n\n})(jQuery, window, document);"],"sourceRoot":"/source/"}