{"version":3,"sources":["container.player.js"],"names":[],"mappingsfile":"container.player.min.js","sourcesContent":["/*\n * ContainerPlayer - Implement regular & fullscreen background videos like a boss.\n * A super easy jQuery powered background / container player for HTML5, YouTube & Vimeo videos.\n *\n * Inspired by Benton Rochesters https://github.com/rochestb/jQuery.YoutubeBackground\n *\n * Author: Oliver Green <oliver@boxedcode.co.uk>\n * Version:  0.9.0\n * License: MIT http://www.opensource.org/licenses/mit-license.php\n * Repository: https://github.com/olsgreen/container.player\n */\n\n(function($, window, document) {\n\n    // Global namespace.\n    var global = window.ContainerPlayer = {};\n\n    if (typeof Object.create !== \"function\") {\n        Object.create = function(obj) {\n            function F() {}\n            F.prototype = obj;\n            return new F();\n        };\n    }\n\n    String.prototype.replaceAll = function(search, replacement) {\n        var target = this;\n        return target.replace(new RegExp(search, 'g'), replacement);\n    };\n\n    var ContainerPlayer = {\n\n        // Default options for the player.\n        defaults: {\n            autoplay: true,\n            loop: true,\n            muted: true,\n            controls: false,\n            ratio: 16 / 9,\n            fitContainer: true,\n            forceAspect: false,\n        },\n\n        init: function(el, userOptions) {\n            var self = this;\n\n            // Pipework\n            self.$window = $(window);\n            self.$container = $(el);\n            self.$dataContainer = self.$container;\n            self.options = $.extend(true, {}, self.defaults, userOptions);\n            self.ID = parseInt(Math.random() * 1000000);\n            self.outerID = 'containerPlayerOuter' + self.ID;\n            self.innerID = 'containerPlayerInner' + self.ID;\n            self.posterID = 'containerPlayerPoster' + self.ID;\n            self.overlayID = 'containerPlayerOverlay' + self.ID;\n            self.resizeEventID = 'resize.ContainerPlayer' + self.ID;\n\n            // Create a container if the selected element is the <body>.\n            if ('BODY' === el.tagName) {\n                self.$container = $('<div class=\"container-player fullscreen-background\"></div>');\n                $(el).append(self.$container);\n            }\n\n            // Create the player DOM.\n            self.createPlayerDOM();\n \n            // Detect the adapter we are using.\n            self.adapter = self.detectAdapter();\n\n            // Boot the adapter.\n            self.adapter.init(self);\n\n            // Listen for the resize event.\n            self.$window\n                .on(self.resizeEventID, self.resize.bind(self))\n                .trigger(self.resizeEventID);\n\n            // Fire the player initialised event.\n            self.$dataContainer.trigger('player.initialised', [self]);\n\n            return self;\n        },\n\n        detectAdapter: function() {\n            // YouTube\n            if (typeof this.options.youTube === 'object') {\n                return Object.create(YouTubeAdapter);\n            } \n\n            // Vimeo\n            else if (typeof this.options.vimeo === 'object') {\n                return Object.create(VimeoAdapter);\n            }\n\n            // HTML5\n            else if (typeof this.options.html5 === 'object') {\n                return Object.create(HTML5Adapter);\n            } \n\n            // No configuration detected, error out.\n            else {\n                throw \"Invalid options passed, no adapter configuration found.\";\n            }\n        },\n\n        createPlayerDOM: function() {\n            var self = this;\n\n            /*jshint multistr: true */\n            self.player = {};\n            self.player.$outer = $('<div id=\"' + self.outerID + '\" class=\"container-player-outer\"></div>');\n            self.player.$inner = $('<div id=\"' + self.innerID + '\" class=\"container-player-inner\"></div>');\n            self.player.$poster = $('<div id=\"' + self.posterID + '\" class=\"container-player-poster\"></div>');\n\n            self.$container.append(\n                self.player.$outer.append(self.player.$poster, self.player.$inner)\n            );\n\n            if (self.options.overlay) {\n                self.player.$overlay = $('<div id=\"' + self.overlayID + '\" class=\"container-player-overlay\"></div>');\n\n                // Class name\n                if (typeof self.options.overlay.class !== \"undefined\") {\n                    self.player.$overlay.addClass(self.options.overlay.class);\n                }\n\n                // Opacity\n                if (typeof self.options.overlay.opacity !== \"undefined\") {\n                    self.player.$overlay.css('opacity', self.options.overlay.opacity);\n                }\n\n                // Color\n                if (typeof self.options.overlay.color !== \"undefined\") {\n                    self.player.$overlay.css('background-color', self.options.overlay.color);\n                }\n\n                // Background image\n                if (typeof self.options.overlay.image !== \"undefined\") {\n                    self.player.$overlay.css('background-image', 'url('+self.options.overlay.image+')');\n\n                    // Background size\n                    if (typeof self.options.overlay.backgroundSize !== \"undefined\") {\n                        self.player.$overlay.css('background-size', 'url('+self.options.overlay.backgroundSize+')');\n                    }\n\n                    // Background repeat\n                    if (typeof self.options.overlay.backgroundRepeat !== \"undefined\") {\n                        self.player.$overlay.css('background-repeat', 'url('+self.options.overlay.backgroundRepeat+')');\n                    }\n                }\n\n                self.$container.append(self.player.$overlay);\n            }\n        },\n\n        setPoster: function(url)\n        {\n            this.player.$poster.css('background-image', 'url('+url+')');\n        },\n\n        resize: function() {\n            var self = this,\n                pWidth, // player width, to be defined\n                pHeight; // player height, tbd;\n\n            // Update the containers dimensions\n            self.options.width = self.$container.width();\n            self.options.height = self.$container.height();\n\n            // Detect if the inner element has been replaced or removed.\n            if (! $.contains(document, self.player.$inner[0])) {\n                self.player.$inner = $('#' + self.innerID);\n            }\n\n            // Maintain the players height and width.\n            if (self.options.forceAspect) {\n                pHeight = (self.options.width / self.options.ratio).toFixed(3);\n                self.$container.height(pHeight);\n\n                $([self.player.$inner, self.player.$poster]).each(function() {\n                    $(this).css({\n                        left: 0,\n                        top: 0,\n                        height: pHeight,\n                        width: self.options.width,\n                    });\n                });\n\n                return;\n            }\n\n            // player width is greater, offset left; reset top\n            if (self.options.fitContainer && (self.options.width / self.options.ratio < self.options.height)) {\n                pWidth = Math.ceil(self.options.height * self.options.ratio);\n                $([self.player.$inner, self.player.$poster]).each(function() {\n                    $(this).width(pWidth).height(self.options.height).css({\n                        left: (self.options.width - pWidth) / 2,\n                        top: 0\n                    });\n                });\n            }\n\n            // player height is greater, offset top; reset left\n            else {\n                pHeight = Math.ceil(self.options.width / self.options.ratio); \n                $([self.player.$inner, self.player.$poster]).each(function() {\n                    $(this).width(self.options.width).height(pHeight).css({\n                        left: 0,\n                        top: (self.options.height - pHeight) / 2\n                    });\n                });\n            }\n\n            // Fire player resized event\n            self.$dataContainer.trigger('player.resized', [self]);\n        },\n\n        /*\n         | Add the various player state CSS classes \n         | and trigger their events on the element.\n         */\n        \n        videoLoaded: function() {\n            this.$container\n                .addClass('loaded');\n            \n            this.$dataContainer.trigger('video.loaded', [this]);\n        },\n\n        videoPlaying: function() {\n            this.$container\n                .removeClass('paused')\n                .addClass('playing');\n\n            this.$dataContainer.trigger('video.playing', [this]);\n        },\n\n        videoPaused: function() {\n            this.$container\n                .removeClass('playing')\n                .addClass('paused');\n\n            this.$dataContainer.trigger('video.paused', [this]);\n        },\n\n        videoEnded: function() {\n            this.$container\n                .removeClass('playing');\n\n            this.$dataContainer.trigger('video.ended', [this]);\n        },\n\n        destroy: function() {\n            this.adapter.destroy();\n            this.player.$inner.remove();\n            this.player.$outer.remove();\n            this.player.$poster.remove();\n            \n            if (this.player.$overlay) {\n                this.player.$overlay.remove();\n            }\n\n            this.$window.unbind(this.resizeEventID);\n            this.$container.unbind();\n            this.$container.empty();\n            this.$container.removeClass('playing paused loaded transition-in');\n\n            // Fire the player destroyed event.\n            this.$dataContainer.trigger('player.destroyed');\n\n            this.$dataContainer.removeData('player');\n\n            for (var k in this) {\n                this[k] = null;\n            }\n        },\n\n        /*\n         | Methods to allow manipulation of the videos \n         | state via the adapter shims.\n         */\n\n        play: function() {\n            this.adapter.play();\n        },\n\n        pause: function() {\n            this.adapter.pause();\n        },\n\n        goTo: function(secs) {\n            this.adapter.goTo(secs);\n        },\n\n        volume: function(percentage) {\n            this.adapter.volume(percentage);\n        },\n\n        mute: function() {\n            this.adapter.mute();\n        },\n\n        unMute: function() {\n            this.adapter.unMute();\n        },\n    },\n\n    AbstactAdapter = {\n\n        // Default options for the adapter.\n        defaults: {},\n\n        init: function(containerPlayer) {\n            throw \"Not implemented\";\n        },\n\n        destroy: function()\n        {\n            throw \"Not implemented\";\n        },\n\n        /*\n         | Shims to allow adapter player control \n         | from the base player.\n         */\n\n        play: function() {\n            throw new Error(\"Not implemented\");\n        },\n\n        pause: function() {\n            throw new Error(\"Not implemented\");\n        },\n\n        goTo: function(secs) {\n            throw new Error(\"Not implemented\");\n        },\n\n        volume: function(percentage) {\n            throw new Error(\"Not implemented\");\n        },\n\n        mute: function() {\n            throw new Error(\"Not implemented\");\n        },\n\n        unMute: function() {\n            throw new Error(\"Not implemented\");\n        },\n    },\n\n    HTML5Adapter = $.extend(Object.create(AbstactAdapter), {\n        \n        // Default options for the adapter.\n        defaults: {\n            sources: [\n                // ['video/mp4', 'http://my-server.com/path/to/video.mp4']\n                // ['video/webm', 'http://my-server.com/path/to/video.webm']\n            ],\n            props: {\n                preload: 'auto', // none | metadata | auto\n                crossorigin: null, // null | anonymous | use-credentials\n            }\n        },\n\n        init: function(containerPlayer) {\n            this.containerPlayer = containerPlayer;\n            this.options = $.extend(true, {}, this.defaults, this.containerPlayer.options.html5);\n            this.containerPlayer.$container.addClass('html5');\n\n            // If sources aren't defined but a single src options is set the videos src property.\n            if (typeof this.options.src !== 'undefined' &&\n                0 === this.options.sources.length) {\n                this.options.props.src = this.options.src;\n            }\n\n            // Poster\n            if (typeof this.options.poster !== \"undefined\") {\n                this.containerPlayer.setPoster(this.options.poster);\n                this.options.props.poster = this.options.poster;\n            }\n\n            // Autoplay\n            if (typeof this.options.props.autoplay === \"undefined\") {\n                this.options.props.autoplay = this.containerPlayer.options.autoplay;\n            }\n\n            // Loop\n            if (typeof this.options.props.loop === \"undefined\") {\n                this.options.props.loop = this.containerPlayer.options.loop;\n            }\n\n            // Controls\n            if (typeof this.options.props.controls === \"undefined\") {\n                this.options.props.controls = this.containerPlayer.options.controls;\n            }\n\n            // Muted\n            if (typeof this.options.props.muted === \"undefined\") {\n                this.options.props.muted = this.containerPlayer.options.muted;\n            }\n\n            this.createHTML5Video();\n        },\n\n        createHTML5Video: function() {\n            // HTML5 video element\n            this.$video = $(\"<video></video>\")\n                .html('Your browser doesn\\'t support HTML5 video tag.')\n                .on('canplay playing pause ended', this.onPlayerStateChange.bind(this));\n\n            // Add the videos properties\n            for (var name in this.options.props) {\n                var value = this.options.props[name];\n                if (value) {\n                    this.$video.prop(name, value);\n                }\n            }\n\n            // Add the videos sources\n            for (var source in this.options.sources) {\n                this.$video.append(\n                    $('<source></source>')\n                        .prop('src', this.options.sources[source][1])\n                        .prop('type', this.options.sources[source][0])\n                );\n            }\n\n            // Add the element to the container\n            this.containerPlayer.player.$inner.append(this.$video);\n        },\n\n        onPlayerStateChange: function(event) {\n            // When the HTML5 elements state changes we\n            // relay the change events to our player.\n            switch (event.type) {\n                case 'canplay':\n                    this.containerPlayer.videoLoaded();\n                break;\n                case 'playing':\n                    this.containerPlayer.videoPlaying();\n                break;\n                case 'pause':\n                    this.containerPlayer.videoPaused();\n                break;\n                case 'ended':\n                    this.containerPlayer.videoEnded();\n                break;\n            }\n        },\n\n        destroy: function() {\n            this.pause();\n            this.$video.prop('src', '#');\n            this.$video.remove();\n            this.containerPlayer.$container.removeClass('html5');\n\n            for (var k in this) {\n                this[k] = null;\n            }\n        },\n\n        /*\n         | Shims to allow adapter player control \n         | from the base player.\n         */\n        \n        play: function() {\n            this.$video[0].play();\n        },\n\n        pause: function() {\n            this.$video[0].pause();\n        },\n\n        goTo: function(secs) {\n            this.$video[0].currentTime = secs;\n        },\n\n        volume: function(percentage) {\n            this.$video[0].volume = percentage / 100;\n        },\n\n        mute: function() {\n            this.$video[0].muted = true;\n        },\n\n        unMute: function() {\n            this.$video[0].muted = false;\n        },\n    }),\n\n    YouTubeAdapter = $.extend(Object.create(AbstactAdapter), {\n\n        // Default options for the adapter.\n        defaults: {\n            videoId: '',\n            tranitionIn: false,\n            playerVars: {\n                iv_load_policy: 3,\n                modestbranding: 1,\n                showinfo: 0,\n                wmode: 'opaque',\n                branding: 0,\n                autohide: 1,\n                rel: 0,\n            }\n        },\n\n        init: function(containerPlayer) {\n            var self = this;\n\n            // Make a local reference to the player\n            self.containerPlayer = containerPlayer;\n            this.containerPlayer.$container.addClass('youtube');\n\n            // Merge the default and user specified options.\n            self.options = $.extend(\n                true, {}, self.defaults, self.containerPlayer.options.youTube\n            );\n\n            // Poster\n            if (typeof self.options.poster !== \"undefined\") {\n                self.containerPlayer.setPoster(this.options.poster);\n            }\n\n            // Autoplay\n            if (typeof self.options.playerVars.autoplay === \"undefined\") {\n                self.options.playerVars.autoplay = self.containerPlayer.options.autoplay ? 1 : 0;\n            }\n\n            // Controls\n            if (typeof self.options.playerVars.controls === \"undefined\") {\n                self.options.playerVars.controls = self.containerPlayer.options.controls ? 1 : 0;\n            }\n\n            // Transition In\n            if (this.options.tranitionIn) {\n                this.containerPlayer.$container.addClass('transition-in');\n            }\n\n            // Define the global YouTube scope for API loading.\n            if (typeof global.YouTube === \"undefined\") {\n                global.YouTube = {\n                    apiLoading: false,\n                    onApiLoad: $.Deferred(),\n                };\n            }\n\n            // When the YouTube API is ready create a new player instance.\n            self.whenApiIsReady(self.createPlayer.bind(self));\n\n            // Load the YouTube API\n            self.loadApi();\n        },\n\n        whenApiIsReady: function(callback) {\n            // Immediatly make the callback if the YouTube API is loaded.\n            if (typeof YT === 'object')  {\n                callback();\n                return;\n            }\n\n            // Add the callback to the queue to be called once the API has loaded.\n            global.YouTube.onApiLoad.done(function() { callback(); });\n        },\n\n        loadApi: function() {\n            if (typeof YT === 'undefined' && global.YouTube.apiLoading === false) {\n                global.YouTube.apiLoading = true;\n\n                // Listen for the ready call from the YouTube API.\n                window.onYouTubeIframeAPIReady = function() {\n                    window.onYouTubeIframeAPIReady = null;\n\n                    // Resolve all of the callbacks that are currently\n                    // waiting for the API to finish loading.\n                    global.YouTube.onApiLoad.resolve();\n                };\n\n                // Load Youtube API\n                var tag = document.createElement('script'),\n                head = document.getElementsByTagName('head')[0];\n\n                if (window.location.origin == 'file://') {\n                    tag.src = 'http://www.youtube.com/iframe_api';\n                } else {\n                    tag.src = '//www.youtube.com/iframe_api';\n                }\n\n                head.appendChild(tag);\n\n                // Clean up Tags.\n                head = null;\n                tag = null;\n            }\n        },\n\n        createPlayer: function() {\n            var self = this;\n\n            // Create a new YouTube player instance with our options.\n            self.player = new YT.Player(self.containerPlayer.innerID, {\n                videoId: self.options.videoId,\n                playerVars: self.options.playerVars,\n                events: {\n                    'onReady': self.onPlayerReady.bind(self),\n                    'onStateChange': self.onPlayerStateChange.bind(self),\n                }\n            });\n        },\n\n        onPlayerReady: function(event) {\n            // Tell the player that the video has been loaded.\n            this.containerPlayer.videoLoaded();\n\n            // Mute the video if our options specify so.\n            if (this.containerPlayer.options.muted) {\n                event.target.mute();\n            }\n        },\n\n        onPlayerStateChange: function(event) {\n            var self = this;\n\n            // When the YouTube players state changes we\n            // relay the change events to our player.\n            switch (event.data) {\n                case YT.PlayerState.PLAYING:\n                    // We wait for the video to start playing before \n                    // fireing the 'playing' event/\n                    var interval = setInterval(function() {\n                            if (self.player.getCurrentTime() >= 0.26) {\n                                clearInterval(interval);\n                                self.containerPlayer.videoPlaying();\n                            }\n                    }, 50);\n                break;\n                case YT.PlayerState.PAUSED:\n                    this.containerPlayer.videoPaused();\n                break;\n                case YT.PlayerState.ENDED:\n                    this.containerPlayer.videoEnded();\n\n                    // Loop the video\n                    if (this.containerPlayer.options.loop) {\n                        this.goTo(0);\n                        this.play();\n                    }\n                break;\n            }\n        },\n\n        destroy: function() {\n            this.pause();\n            this.player.destroy();\n            this.containerPlayer.$container.removeClass('youtube');\n\n            for (var k in this) {\n                this[k] = null;\n            }\n        },\n\n        /*\n         | Shims to allow adapter player control \n         | from the base player.\n         */\n\n        play: function() {\n            this.player.playVideo();\n        },\n\n        pause: function() {\n            this.player.pauseVideo();\n        },\n\n        goTo: function(secs) {\n            this.player.seekTo(secs);\n        },\n\n        mute: function() {\n            this.player.mute();\n        },\n\n        unMute: function() {\n            this.player.unMute();\n        },\n\n        volume: function(percentage) {\n            this.player.setVolume(percentage);\n            this.player.unMute();\n        }\n    });\n\n    VimeoAdapter = $.extend(Object.create(AbstactAdapter), {\n\n        // Default options for the adapter.\n        defaults: {\n            videoId: '',\n            transitionIn: false,\n            playerVars: {\n                autopause: false,\n                byline: false,\n                color: '00adef',\n                portrait: false,\n                title: false,\n                controls: false,\n            }\n        },\n\n        init: function(containerPlayer) {\n            var self = this;\n\n            // Make a local reference to the player\n            self.containerPlayer = containerPlayer;\n            this.containerPlayer.$container.addClass('vimeo');\n\n            // Merge the default and user specified options.\n            self.options = $.extend(\n                true, {}, self.defaults, self.containerPlayer.options.vimeo\n            );\n\n            // Set the video id.\n            self.options.playerVars.id = self.options.videoId;\n\n            // Define the global Vimeo scope for API loading.\n            if (typeof global.Vimeo === \"undefined\") {\n                global.Vimeo = {\n                    apiLoading: false,\n                    onApiLoad: $.Deferred(),\n                    apiCheckInterval: null,\n                };\n            }\n\n            // Poster\n            if (typeof self.options.poster !== \"undefined\") {\n                self.containerPlayer.setPoster(this.options.poster);\n            }\n\n            // Autoplay\n            if (typeof self.options.playerVars.autoplay === \"undefined\") {\n                self.options.playerVars.autoplay = self.containerPlayer.options.autoplay;\n            }\n\n            // Controls\n            if (typeof self.options.playerVars.controls === \"undefined\") {\n                self.options.playerVars.background = self.containerPlayer.options.controls ? false : true;\n            }\n\n            // Loop\n            if (typeof this.options.playerVars.loop === \"undefined\") {\n                this.options.playerVars.loop = this.containerPlayer.options.loop;\n            }\n\n            // Transition In\n            if (this.options.tranitionIn) {\n                this.containerPlayer.$container.addClass('transition-in');\n            }\n\n            self.whenApiIsReady(self.createPlayer.bind(this));\n\n            self.loadApi();\n        },\n\n        whenApiIsReady: function(callback) {\n            // Immediatly make the callback if the Vimeo API is loaded.\n            if (typeof Vimeo === 'object')  {\n                callback();\n                return;\n            }\n\n            // Add the callback to the queue to be called once the API has loaded.\n            global.Vimeo.onApiLoad.done(function() { callback(); });\n        },\n\n        loadApi: function() {\n            if (typeof Vimeo === 'undefined' && global.Vimeo.apiLoading === false) {\n                global.Vimeo.apiLoading = true;\n\n                // Listen for the ready call from the YouTube API.\n                global.Vimeo.apiCheckInterval = setInterval(function() {\n                    if (typeof Vimeo !== 'undefined') {\n                        clearInterval(global.Vimeo.apiCheckInterval);\n\n                        // Resolve all of the callbacks that are currently\n                        // waiting for the API to finish loading.\n                        global.Vimeo.onApiLoad.resolve();\n                    }\n                }, 100);\n\n                // Load API\n                var tag = document.createElement('script'),\n                head = document.getElementsByTagName('head')[0];\n\n                if (window.location.origin == 'file://') {\n                    tag.src = 'http://player.vimeo.com/api/player.js';\n                } else {\n                    tag.src = '//player.vimeo.com/api/player.js';\n                }\n\n                head.appendChild(tag);\n\n                // Clean up Tags.\n                head = null;\n                tag = null;\n            }\n        },\n\n        getVideoUrl: function() {\n            var url, host, params;\n            \n            // Build the parameter string and replace \n            // string booleans with integers.\n            params = $.param(this.options.playerVars)\n                .replaceAll('false', '0')\n                .replaceAll('true', '1');\n\n            if (window.location.origin == 'file://') {\n                host = 'http://player.vimeo.com/video/';\n            } else {\n                host = '//player.vimeo.com/video/';\n            }\n\n            return host+this.options.videoId+'?'+params;\n        },\n\n        createPlayer: function() {\n            var self = this;\n\n            // Due to the Vimeo JS API not supporting their experimental background \n            // switch, we must build the iFrame manually and then attach their API.\n            var $iframe = $('<iframe></iframe>')\n                $iframe.prop('src', this.getVideoUrl());\n                $iframe.prop('frameborder', '0');\n                $iframe.prop('allowfullscreen', '1');\n                $iframe.prop('allow', 'autoplay; encrypted-media');\n\n            // Attach the frame\n            this.containerPlayer.player.$inner.append($iframe);\n\n            // Boot the player\n            this.player = new Vimeo.Player($iframe[0]);\n\n            // Mute if needed\n            if (this.containerPlayer.options.muted) {\n                this.player.setVolume(0);\n            }\n\n            var progress = {\n                \"duration\": null,\n                \"percent\": 0,\n                \"seconds\": 0\n            }\n\n            // Events            \n            this.player.on('progress', (newProgress) => {\n                if (newProgress.seconds > progress.seconds) {\n                    this.containerPlayer.videoPlaying()\n                    progress = newProgress\n                }\n            });\n            this.player.on('pause', this.containerPlayer.videoPaused.bind(this.containerPlayer));\n            this.player.on('ended', this.containerPlayer.videoEnded.bind(this.containerPlayer));\n            this.player.on('loaded', this.containerPlayer.videoLoaded.bind(this.containerPlayer));\n\n            $iframe = null;\n        },  \n\n        destroy: function() {\n            this.pause();\n            this.containerPlayer.$container.addClass('vimeo');\n            this.player.unload();\n\n            for (var k in this) {\n                this[k] = null;\n            }\n        },\n\n        /*\n         | Shims to allow adapter player control \n         | from the base player.\n         */\n\n        play: function() {\n            this.player.play();\n        },\n\n        pause: function() {\n            this.player.pause();\n        },\n\n        goTo: function(secs) {\n            this.player.setCurrentTime(secs);\n        },\n\n        volume: function(percentage) {\n            this.player.setVolume(percentage / 100);\n        },\n\n        mute: function() {\n            this.player.setVolume(0);\n            this.initialPlayerVolume = this.player.getVolume();\n        },\n\n        unMute: function() {\n            this.player.setVolume(this.initialPlayerVolume || 0.7);\n        },\n    });\n\n    // Create the plugin.\n    $.fn.ContainerPlayer = function(options) {\n        return this.each(function() {\n            var player = Object.create(ContainerPlayer);\n\n            // Boot the player class.\n            player.init(this, options);\n\n            // Expose the player via the elements data method.\n            $.data(this, \"player\", player);\n\n            player = null;\n        });\n    };\n\n})(jQuery, window, document);"]}